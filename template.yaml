AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  notebook-data-redirector

  SAM template for notebook data redirector

Parameters:
  SecretArn:
    Type: String
    Description: ARN of the Secrets Manager secret containing Box JWT credentials
  BoxFolderId:
    Type: String
    Description: ID of the root Box folder
  LambdaRoleARN:
    Type: String
    Description: ARN of the role to use for the lambda functions
  SecretRoleARN:
    Type: String
    Description: ARN of the role to assume to retrieve the secret

Globals:
  Function:
    Runtime: python3.7
    Handler: index.handler
    CodeUri: notebook_data_redirector/
    Environment:
      Variables:
        SECRET_ARN: !Ref SecretArn
        BOX_FOLDER_ID: !Ref BoxFolderId
        SECRET_ROLE_ARN: !Ref SecretRoleARN
  Api:
    EndpointConfiguration: REGIONAL

Resources:
  ManifestTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: filepath
        Type: String

  BoxWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      # Box retries after 30 seconds, so we should give up at that point, too:
      Timeout: 30
      Handler: webhook_receiver.lambda_handler
      Role: !Ref LambdaRoleARN
      Environment:
        Variables:
          MANIFEST_TABLE_NAME: !Ref ManifestTable
      Events:
        BoxWebhookEvent:
          Type: Api
          Properties:
            Path: /webhook_event
            Method: post


  # SyncFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     MemorySize: 1024
  #     # 15 minutes (Lambda's maximum)
  #     Timeout: 900
  #     ReservedConcurrentExecutions: 1
  #     Handler: sync.lambda_handler
  #     Role: !Ref LambdaRoleARN
  #     Environment:
  #       Variables:
  #         MANIFEST_TABLE_NAME: !Ref ManifestTable
  #     Events:
  #       SyncFunctionEvent:
  #         Type: Schedule
  #         Properties:
  #           # Run every 15 minutes
  #           Schedule: cron(*/15 * * * ? *)

  RedirectorFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      # These should be very quick, since we're only making one DynamoDB read request, but due to the
      # boxsdk and its dependencies, our distribution package is large and we have the possibility of
      # a long cold start.
      Timeout: 15
      Handler: redirector.lambda_handler
      Role: !Ref LambdaRoleARN
      Environment:
        Variables:
          MANIFEST_TABLE_NAME: !Ref ManifestTable
      Events:
        RedirectorEvent:
          Type: Api
          Properties:
            Path: /redirect/{filepath+}
            Method: get

        # This function should not be contacting Box, so it doesn't need access to the secret.

Outputs:
  BoxWebhookURL:
    Description: "Box webhook URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/webhook_event"
  RedirectBaseURL:
    Description: "Redirector base URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/redirect"
